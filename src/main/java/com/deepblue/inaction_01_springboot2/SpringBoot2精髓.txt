---------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------- 第1章 Java EE 简介 -------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
@RestController 等价于 @Controller 和 @ResponseBody 的结合

---------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第2章 SpringBoot 基础 -----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
Bean 初始化和销毁:
    当Bean初始化之后, 会调用 被 @PostConstruct 注解的方法
    在Bean被销毁之前, 会调用 被 @PreDestroy 注解的方法

引用 Bean的两种方式:
    使用名称引用: @Qualifier
    @Qualifier("config")
    private DataSourceConfig config0;

    使用类型引用: @Autowired
    @Autowired
    private DataSourceConfig config1;

Aspect 的学习, 参考 Spring3.x实战.txt 中的东西!

---------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第3章 MVC 框架 ----------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
配置 MVC 全局特性, 通过 implements WebMvcConfigurer 来实现, 参考 com.deepblue.inaction_01_springboot2.chapter_03.config.CommonWebMvcConfig

拦截器: order 值越小 优先级越高; 参考: com.deepblue.inaction_01_springboot2.chapter_03.interceptor 中的例子!
    PathPattern 类中的 正则匹配规则:
    // 使用以下规则匹配 URL 路径:
    <p>{@code PathPattern} matches URL paths using the following rules:<br>
    <ul>
        // ? 匹配一个字符
        <li>{@code ?} matches one character</li>

        // * 匹配路径段内的零个或多个字符
        <li>{@code *} matches zero or more characters within a path segment</li>

        // ** 匹配零个或多个<em>路径段</em>, 直到路径结束
        <li>{@code **} matches zero or more <em>path segments</em> until the end of the path</li>

        <li><code>{spring}</code> matches a <em>path segment</em> and captures it as a variable named "spring"</li>
        <li><code>{spring:[a-z]+}</code> matches the regexp {@code [a-z]+} as a path variable named "spring"</li>
        <li><code>{*spring}</code> matches zero or more <em>path segments</em> until the end of the path and captures it as a variable named "spring"</li>
    </ul>


---------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- 第5章 数据库访问 ---------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
如果想从优化方面使用MySQL可以参考 高性能MySQL.txt 中的东西

引入数据库的 maven 依赖 并添加相关配置 参考 com.deepblue.inaction_01_springboot2.chapter_05.config.DataSourceConfig.java 类

Spring JDBC Template
    只要配置了数据源 DataSourceConfig 就能直接使用 jdbcTemplate 了!


---------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第7章 SpringBoot 配置 -----------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
在SpringBoot 出现之前, 配置文件是 类似于 application-xxx.xml 的格式, 举例: application-datasource.xml, application-mvc.xml 等!
SpringBoot 之后就只有一个 配置文件了 application.properties;

SpringBoot 默认启动端口: 8080, 配置服务端口 server.port=9090

server.tomcat.* 包含了 Tomcat 的相关配置, 较为重要的配置如下:

＃打开 Tomcat 访问日志
server.tomcat.access.log.enabled=false

＃访问日志所在的目录
server.tomcat.accesslog.directory=logs

＃允许 HTTP 请求缓存到请求队列的最大个数, 默认不限制
server.tomcat.accept-count=

＃最大连接数, 默认不限制, 如果一旦连接数到达, 剩下的连接将会保存到请求缓存队列里, 也就是 accept-count 指定队列
server.tomcat.max-connections=

＃最大工作线程数
server.tomcat.max-threads=

#HTTP POST 内容最大长度, 默认不限制
server.tomcat.max-http-post-size=


@Value 可以将一个配置 装配到一个Bean中!

SpringBoot 自动装配 @Configuration, @Bean


---------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- 第11章 MongoDB ---------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
具体参考 com.deepblue.inaction_01_springboot2.chapter_11 中的内容!


---------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------- 第12章 Redis ---------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
具体参考 com.deepblue.inaction_01_springboot2.chapter_12 中的内容!


---------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第13章 elasticsearch ------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
这里只搭建了集群 和 使用了一下 elasticsearch-head 插件 和 kibana , 整合以后有时间去搞吧!


---------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ 第16章 zookeeper ------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------
使用



























