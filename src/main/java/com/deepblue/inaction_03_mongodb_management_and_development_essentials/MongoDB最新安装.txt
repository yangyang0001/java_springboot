参考官网安装教程:
    下载地址
        https://www.mongodb.com/try/download/community

        本人使用 mongodb-linux-x86_64-rhel70-5.0.30.tgz

    安装教程
        https://docs.mongodb.com/guides/server/install/

    配置环境变量
        export PATH=/home/mongodb-linux-x86_64-rhel70-5.0.30/bin:$PATH

    启动命令
        mongod --dbpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/data/db/
        mongod --dbpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/data/db/ --logpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/logs/mongodb.log --logappend


    配置启动命令:
        首先创建日志文件
            cd /home/mongodb-linux-x86_64-rhel70-5.0.30/
            mkdir logs
            cd logs
            vim mongodb.log
            保存即可!

        配置启动命令
            vim /etc/rc.local

            ## 加入如下内容
            mongod --dbpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/data/db/ --logpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/logs/mongodb.log --logappend
            mongod --dbpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/data/db/ --logpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/logs/mongodb.log --logappend

    专业DBA 启动时可能加上很多的参数, 这样会看起来非常的混乱, 这里采用配置文件的方式进行配置

        配置文件过程
            cd /home/mongodb-linux-x86_64-rhel70-5.0.30/
            vim mongodb.cnf     这里参考 mongodb.cnf 文件
            保存即可!

        启动命令
            cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin/
            mongod -f mongodb.cnf

            或者使用命令:

            cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin/
            mongod --config mongodb.cnf



    设置权限:
    // 创建一个 用户管理员用户
    use admin
    db.createUser({user : "root", pwd : "Yang199001", roles : [{role:"root", db : "admin"}]});

    // 创建单个数据库用户
    use mydb
    db.createUser({ user: "yangyang", pwd: "123456", roles: [{ role: "readWrite", db: "mydb"}]})

    user  : 用户名
    pwd   : 密码
    db    : 指定该用户的数据库, admin是用于权限控制的数据库, 如果没有需要新建一个
    roles : 指定用户的角色, 可以用一个空数组给新用户设定空角色；在roles字段,可以指定内置角色和用户定义的角色。role里的角色可以选 :
    
    Built-In Roles (内置角色) :
        1、数据库用户角色 : read、readWrite;
        2、数据库管理角色 : dbAdmin、dbOwner、userAdmin；
        3、集群管理角色 : clusterAdmin、clusterManager、clusterMonitor、hostManager；
        4、备份恢复角色 : backup、restore；
        5、所有数据库角色 : readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase
        6、超级用户角色 : root
        // 这里还有几个角色间接或直接提供了系统超级用户的访问 (dbOwner 、userAdmin、userAdminAnyDatabase)
        7、内部角色 : __system
    
    具体角色的功能
        Read : 允许用户读取指定数据库
        readWrite : 允许用户读写指定数据库
        dbAdmin : 允许用户在指定数据库中执行管理函数, 如索引创建、删除, 查看统计或访问system.profile
        userAdmin : 允许用户向system.users集合写入, 可以找指定数据库里创建、删除和管理用户
        clusterAdmin : 只在admin数据库中可用, 赋予用户所有分片和复制集相关函数的管理权限
        readAnyDatabase : 只在admin数据库中可用, 赋予用户所有数据库的读权限
        readWriteAnyDatabase : 只在admin数据库中可用, 赋予用户所有数据库的读写权限
        userAdminAnyDatabase : 只在admin数据库中可用, 赋予用户所有数据库的userAdmin权限
        dbAdminAnyDatabase : 只在admin数据库中可用, 赋予用户所有数据库的dbAdmin权限
        root : 只在admin数据库中可用, 超级账号, 超级权限


    查看所有用户列表:
        use admin
        db.system.users.find();









# mongodb.conf

# Where to store the data.
dbpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/data/db/

#where to log
logpath=/home/mongodb-linux-x86_64-rhel70-5.0.30/logs/mongodb.log
logappend=true

# daemon flag
fork = true

bind_ip = 127.0.0.1
port = 27017

# Enable journaling, http://www.mongodb.org/display/DOCS/Journaling
journal=true

# Enables periodic logging of CPU utilization and I/O wait
#cpu = true

# Turn on/off security.  Off is currently the default
#noauth = true
#auth = true
# Verbose logging output.
#verbose = true

# Inspect all client data for validity on receipt (useful for
# developing drivers)
#objcheck = true

# Enable db quota management
#quota = true

# Set oplogging level where n is
#   0=off (default)
#   1=W
#   2=R
#   3=both
#   7=W+some reads
#oplog = 0
# Diagnostic/debugging option
#nocursors = true

# Ignore query hints
#nohints = true

# Disable the HTTP interface (Defaults to localhost:27018).
#nohttpinterface = true

# Turns off server-side scripting.  This will result in greatly limited
# functionality
#noscripting = true

# Turns off table scans.  Any query that would do a table scan fails.
#notablescan = true

# Disable data file preallocation.
#noprealloc = true

# Specify .ns file size for new databases.
# nssize = <size>
# Accout token for Mongo monitoring server.
#mms-token = <token>

# Server name for Mongo monitoring server.
#mms-name = <server-name>

# Ping interval for Mongo monitoring server.
#mms-interval = <seconds>

# Replication Options

# in replicated mongo databases, specify here whether this is a slave or master
#slave = true
#source = master.example.com
# Slave only: specify a single database to replicate
#only = master.example.com
# or
#master = true
#source = slave.example.com
# Address of a server to pair with.
#pairwith = <server:port>
# Address of arbiter server.
#arbiter = <server:port>
# Automatically resync if slave data is stale
#autoresync
# Custom size for replication operation log.
#oplogSize = <MB>
# Size limit for in-memory storage of op ids.
#opIdMem = <bytes>

# SSL options
# Enable SSL on normal ports
#sslOnNormalPorts = true
# SSL Key file and password
#sslPEMKeyFile = /etc/ssl/mongodb.pem
#sslPEMKeyPassword = pass
























---------------------------------------- 再次之命令从此处开始 -----------------------------------
配置 ReplicaSet 1

    在 Server A 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard1 --bind_ip 0.0.0.0 --port 27017 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_1 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_1/shard1_1.log --logappend --fork


    在 Server B 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard1 --bind_ip 0.0.0.0 --port 27017 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_2 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_2/shard1_2.log --logappend --fork

    在 Server C 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard1 --bind_ip 0.0.0.0 --port 27017 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_3 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_3/shard1_3.log --logappend --fork

初始化 ReplicaSet 1
    连接任意一台 Server 的 27017 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongo --port 27017

    客户端下执行初始化命令:
    config = {_id: "shard1", members :[
        {"_id":0, "host":"192.168.188.84:27017"},
        {"_id":1, "host":"192.168.188.85:27017"},
        {"_id":2, "host":"192.168.188.86:27017"}]
    }
    rs.initiate(config)

配置 ReplicaSet 2

    在 Server A 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard2 --bind_ip 0.0.0.0 --port 27018 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_1 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_1/shard2_1.log --logappend --fork


    在 Server B 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard2 --bind_ip 0.0.0.0 --port 27018 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_2 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_2/shard2_2.log --logappend --fork

    在 Server C 上 执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongod --shardsvr --replSet shard2 --bind_ip 0.0.0.0 --port 27018 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_3 \
    --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_3/shard2_3.log --logappend --fork

初始化 ReplicaSet 2
    连接任意一台 Server 的 27018 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongo --port 27018

    客户端下执行初始化命令:
    config = {_id: "shard2", members :[
        {"_id":0, "host":"192.168.188.84:27018"},
        {"_id":1, "host":"192.168.188.85:27018"},
        {"_id":2, "host":"192.168.188.86:27018"}]
    }
    rs.initiate(config)


配置3台 Config Server
    在 Server A, Server B, Server C 上执行命令; TODO 这里特别注意一下, --replSet=cfgReplSet 也类似于 ReplicaSet 集群 起相同的名字, 此处暂定为 cfgReplSet

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin

    mongod --configsvr --replSet cfgReplSet --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/config --bind_ip 0.0.0.0 --port 20000 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/config/config.log --logappend --fork

初始化 Config Server 为 ReplicaSet 集群
    连接任意一台 Server 的 20000 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongo --port 20000

    客户端下执行初始化命令:
    config = {_id: "cfgReplSet", members :[
        {"_id":0, "host":"192.168.188.84:20000"},
        {"_id":1, "host":"192.168.188.85:20000"},
        {"_id":2, "host":"192.168.188.86:20000"}]
    }
    rs.initiate(config)


配置3台 Route Process
    在 Server A, Server B, Server C 上执行命令

    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongos --configdb cfgReplSet/192.168.188.84:20000,192.168.188.85:20000,192.168.188.86:20000 --bind_ip 0.0.0.0 --port 30000 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/mongos.log --logappend --fork


每个服务器中启动的进程类似为:
    ps -ef|grep mongo
    root       1745      1  1 01:04 ?        00:01:42 mongod --shardsvr --replSet shard1 --bind_ip 0.0.0.0 --port 27017 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_2 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard1_2/shard1_2.log --logappend --fork
    root       1829      1  3 01:07 ?        00:03:50 mongod --shardsvr --replSet shard2 --bind_ip 0.0.0.0 --port 27018 --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_2 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/shard2_2/shard2_2.log --logappend --fork
    root       2186      1  2 02:00 ?        00:01:23 mongod --configsvr --replSet cfgReplSet --dbpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/config --bind_ip 0.0.0.0 --port 20000 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/config/config.log --logappend --fork
    root       2328      1  0 02:08 ?        00:00:11 mongos --configdb cfgReplSet/192.168.188.30:20000,192.168.188.31:20000,192.168.188.32:20000 --bind_ip 0.0.0.0 --port 30000 --logpath /home/mongodb-linux-x86_64-rhel70-5.0.30/data/mongos.log --logappend --fork
    root       3133   1568  0 03:02 pts/0    00:00:00 grep --color=auto mongo


配置 Shard Cluster
    连接任意一台 Server 的 30000 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin

    mongo --host 192.168.188.30 --port 30000

    添加shard分片功能到集群中
    use admin
    db.runCommand({addshard: "shard1/192.168.188.84:27017,192.168.188.85:27017,192.168.188.86:27017"})
    db.runCommand({addshard: "shard2/192.168.188.84:27018,192.168.188.85:27018,192.168.188.86:27018"})

    激活数据库的分片功能:
    db.runCommand({enablesharding : "test"})
    激活数据库中表的分片功能:
    db.runCommand({shardcollection : "test.users", key : {_id : 1}})


    TODO 结果如下:

        mongos> use admin
        switched to db admin
        mongos> db.runCommand({addshard: "shard1/192.168.188.30:27017, 192.168.188.31:27017, 192.168.188.32:27017"})
        {
                "shardAdded" : "shard1",
                "ok" : 1,
                "$clusterTime" : {
                        "clusterTime" : Timestamp(1649528907, 1),
                        "signature" : {
                                "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                                "keyId" : NumberLong(0)
                        }
                },
                "operationTime" : Timestamp(1649528907, 1)
        }
        mongos> db.runCommand({addshard: "shard2/192.168.188.30:27018, 192.168.188.31:27018, 192.168.188.32:27018"})
        {
                "shardAdded" : "shard2",
                "ok" : 1,
                "$clusterTime" : {
                        "clusterTime" : Timestamp(1649528913, 1),
                        "signature" : {
                                "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                                "keyId" : NumberLong(0)
                        }
                },
                "operationTime" : Timestamp(1649528913, 1)
        }


        将数据库用做 能够分片
        mongos> db.runCommand({enablesharding : "test"})
        {
                "ok" : 1,
                "$clusterTime" : {
                        "clusterTime" : Timestamp(1649528934, 3),
                        "signature" : {
                                "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                                "keyId" : NumberLong(0)
                        }
                },
                "operationTime" : Timestamp(1649528934, 2)
        }

        将数据库中的表用做 能够分片
        mongos> db.runCommand({shardcollection : "test.users", key : {_id : 1}})
        {
                "collectionsharded" : "test.users",
                "ok" : 1,
                "$clusterTime" : {
                        "clusterTime" : Timestamp(1649528941, 26),
                        "signature" : {
                                "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                                "keyId" : NumberLong(0)
                        }
                },
                "operationTime" : Timestamp(1649528941, 22)
        }


验证Sharding
    连接任意一台 Server 的 30000 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin

    mongo --host 192.168.188.30 --port 30000

    mongos> use test
    mongos> for(var i = 0; i < 200000; i++) {db.users.insert({"id": i, "address_1": "Beijing", "address_2": "Shanghai"});}

    mongos> db.users.stats()



TODO 使用注意: 每次创建新的数据库和新的表必须执行:

    连接任意一台 Server 的 30000 端口
    cd /home/mongodb-linux-x86_64-rhel70-5.0.30/bin
    mongo --host 192.168.188.30 --port 30000

    激活数据库的分片功能, 举例如下:
    sh.enableSharding("TDB1")
    sh.enableSharding("TDB2")
    sh.enableSharding("TDB3")
    sh.enableSharding("TDB4")
    激活数据库中表的分片功能, 举例如下:
    sh.shardCollection("TDB1.test01", {_id:1})
    sh.shardCollection("TDB2.test02", {_id:1})
    sh.shardCollection("TDB3.test03", {_id:1})
    sh.shardCollection("TDB4.test04", {_id:1})