数据结构参考地址: https://www.cs.usfca.edu/~galles/visualization/RedBlack.html

ArrayList 源码解读:
    ArrayList 允许存在 null 值!
    ArrayList 是不同步的类, 即线程不安全的类
    ArrayList 初始容量默认值为10; DEFAULT_CAPACITY = 10
    ArrayList ListIterator创建之后, 只能通过 ListIterator 进行 remove, add 来修改数组的结构, 否则 抛出 ConcurrentModificationException
    ArrayList ListIterator创建之后, 同步修改时会触发快速失败;
    ArrayList 扩容策略: 在 grow(..) 方法中 int newCapacity = oldCapacity + (oldCapacity >> 1); 扩容为 原始的 1.5倍!


Hashtable 源码解读:
    Hashtable 不允许 key = null 或 value = null 的情况!
    Hashtable 是同步类, 即线程安全的类, 内部采用 synchronized 方法实现!
    容量: 指 Hashtable 中 桶的个数!
    初始容量: 指 Hashtable 创建时桶的个数, 默认初始容量为 11; 代码在 new Hashtable() 构造中!
    负载因子: 指 Hashtable 扩容之前, 允许达到程度的度量! 默认负载因子为 loadFactor = 0.75f; 代码在 new Hashtable() 构造中!
    使用推荐: 如果想使用非线程安全的 key/value 类, 建议使用 HashMap 代替 Hashtable
           　如果想使用线程安全的 　key/value 类, 建议使用 ConcurrentHashMap 代替 Hashtable


HashMap 源码解读:
    HashMap 允许存在 key = null, value = null
    HashMap 是不同步的类, 即线程不安全的类
    HashMap 核心属性 初始容量 和 负载因子, 初始容量默认值: DEFAULT_CAPACITY = 16; 初始负载因子默认值: DEFAULT_LOAD_FACTOR = 0.75f;
    HashMap 桶分裂为 TreeNodes 的条件: 桶的深度至少为8, 桶的总个数至少为64;  　TREEIFY_THRESHOLD = 8;  MIN_TREEIFY_CAPACITY = 64;
    HashMap TreeNodes 合并为 链表的条件, 当 TreeNodes 中元素的个数小于6;     UNTREEIFY_THRESHOLD = 6;
    HashMap 扩容策略: 在 resize() 方法中 newCap = oldCap << 1; 扩容为 原始的 2倍!

    二项式分布概率: P(X=k) = C(n, k) p^k (1-p)^(n-k)

                                            e^(-𝝀) * 𝝀^k
    泊松分布概率: P(k events in interval) =  ------------
                                                k!

    𝝀 表示 在某个时间/空间中 某件事发生的概率
    e 表示 自然常数
    k 表示 事件 在这段时间内发生的 次数
    P 表示 事件 在某段事件内发生 k次 的概率

    𝝀 = 0.5 时, exp(-0.5) * pow(0.5, k) / factorial(k)


    加载因子(DEFAULT_LOAD_FACTOR), 影响二项式分布概率P(X=k), 二项式分布概率的期望 影响 P(k events in interval) 中 𝝀 的值, 从而影响 泊松分布的概率

    加载因子就会 影响 HashMap 的扩展, 以及 链表 转红黑树!

    对于HashMap.table[].length的空间来说, 放入0.75*length个数据, 表示数组某一个下标 存放数据数量为0~8时的概率情况
    0:    0.60653066
    1:    0.30326533
    2:    0.07581633
    3:    0.01263606
    4:    0.00157952
    5:    0.00015795
    6:    0.00001316
    7:    0.00000094
    8:    0.00000006

    DEFAULT_LOAD_FACTOR = 0.75f 时 𝝀=0.5 , 举例说明:
    Map默认  数组长度: 16 ,      在数组长度为16的HashMap中放入12 (0.75*length) 个数据, 同一下标的链表中, 发生 存放了8个元素的 概率是0.00000006
    扩容一次　数组长度: 16*2=32 , 在数组长度为32的HashMap中放入24 (0.75*length) 个数据, 同一下标的链表中, 发生 存放了8个元素的 概率是0.00000006
    扩容一次　数组长度: 32*2=64 , 在数组长度为64的HashMap中放入48 (0.75*length) 个数据, 同一下标的链表中, 发生 存放了8个元素的 概率是0.00000006


红黑树(它是一种二叉树):
    红黑树的规则:
        1、任何一个节点都必须有一种颜色, 不是红色就是黑色!
        2、根节点必须是黑色!
        3、null 节点必须是黑色!
        4、如果一个非空节点为红色, 则子节点一定为黑色!
        5、从根节点到 任何一个null节点 所经过的 黑色节点个数 必须一样!


ConcurrentHashMap 源码解析:
    ConcurrentHashMap 不允许存在 key = null 或者 value = null
    ConcurrentHashMap 是同步的类, 即线程安全的类
    ConcurrentHashMap 核心属性 初始容量 和 负载因子, 初始容量默认值: DEFAULT_CAPACITY = 16; 初始负载因子默认值: DEFAULT_LOAD_FACTOR = 0.75f;
    ConcurrentHashMap 桶分裂为 TreeNodes 的条件: 桶的深度至少为8, 桶的总个数至少为64;  　TREEIFY_THRESHOLD = 8;  MIN_TREEIFY_CAPACITY = 64;
    ConcurrentHashMap TreeNodes 合并为 链表的条件, 当 TreeNodes 中元素的个数小于6;     UNTREEIFY_THRESHOLD = 6;
    ConcurrentHashMap 扩容策略: 在 resize() 方法中 newCap = oldCap << 1; 扩容为 原始的 2倍!




