-----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 第1章 分布式架构 --------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
服务节点和数据节点
    服务节点: 直接和Client打交道的节点;
    数据节点: 支撑服务节点的数据, 没有这个就不存在一切!

集中式和分布式的问题
    集中式
        不用考虑 节点的部署和一致性问题, 集中部署不存在分布式的3大问题!

    分布式
        需要考虑分布式3大问题 一致性, 可用性, 网络分区!

集中式和分布式的特性:
    集中式
        集中部署集中管理, 要求人员素质非常高, 需要什么都必须学习和了解, 因为各种服务都是集中式的部署, 集中式的处理, 存在一旦宕机非常恐怖的现象!

    分布式
        分布性: 集群中的节点可以跨越空间概念, 分别部署在不同的机房或者不同的城市!

        对等性: 没有什么主从的概念, 都是对等的; 服务节点表现的极为明确, 数据节点则很少有能做到完全分布式的!

        并发性: 数据的事务性并发是核心问题, 数据节点一旦发生事务性并发难免就会出现数据的不一致, 这是个分布式系统在数据节点面临的巨大挑战!

        缺乏全局的时钟: 因为没有统一的时钟发生器, 造成不知道哪个分布式服务节点提交的指令是先到达的, 这就非常恐怖, 及其有可能造成数据的不一致性!

        故障性:
            黄金定律: 在设计时能够考虑到的各种故障, 上线后一定会发生, 甚至会延伸出其他更多的故障!

分布式环境的各种问题:
    通信异常

    网络分区
        因为网络异常或者延迟造成某些节点自动组成一个小的集群, 这种情况俗称脑裂! 这个集群和正常工作的集群之间会产生数据不一致的情况!

    三态问题
        成功
        失败
        超时

    节点故障

从 ACID 到 CAP/BASE
    事务的 ACID 特性 原子性, 一致性, 隔离性, 持久性!
        原子性:
            当前执行单元不可分割, 只能出现两种结果: 单元中的指令全部执行成功; 单元中的执行指令全部不执行;

        一致性:
            事务的一致性原则, 是保证当前事务成功完成时, 数据库从 一致性状态A 转变为 一致性状态B, 整个过程都必须是一致性的!

        隔离性:
            并发环境中, 事务与其他操作都是隔离进行的, 互不干扰!
            READ UNCOMMITTED    读未提交
            READ COMMITTED      读已提交
            REPEATABLE READ     可重复读    二者读取的数据时一致的, 事务型存储引擎InnoDB 中的 MVCC 机制就可以保证这种隔离级别!
            SERIALIZABLE        加锁读取

        持久性:
            保证事务一旦提交就对数据库的更改就是永久起作用的, 最终的数据就是各种事务的操作后的结果集合!


    分布式事务
        不同银行的转账业务: 银行A 向 银行B 转账1万元, 这是就必须保证 两个操作都必须成功, 否则就会出现一方受损的情况!
            现实中往往进行业务的拆分
                事务A: 银行A减少1万元;
                事务B: 发起事务A的某种确认机制, 一旦确认A完成, 则执行B, 直到事务B成功完成!

                这样保证了 事务A 和 事务B 的 分布式完整性!

        分布式事务的难点: 很难控制不同服务方的服务节点或者数据服务节点, 这种分布式事务是有局限性的, 通常是通过确认机制, 来拆分事务以达到分布式事务的目的!

CAP 和 BASE 理论
    CAP 定理: 一致性、可用性、分区容错性 不可能同时满足, 单位时刻只能满足其中的两项!

    CAP 包含三部分: 一致性、可用性、分区容错性
        一致性:
            分布式环境中的, 不同副本之间的数据总是能够保证一致性! 如果对于当个数据而言, 当数据发生改变后, 用户能够直接读取到更新后的值, 这种称为强一致性!
            问题: 更新之后多长时间能够读取到最新的值? 这个强一致性的定义有问题(书中不严谨)!

        可用性:
            所谓可用, 用户发起一个请求, 用户能够在 有限的时间内 获取到结果!

        分区容错性:
            分布式系统必然会有很多部署节点, 必然会有不同的网络分区, 这种稳定性, 完全依赖网络的稳定性!

        设计架构时往往关注的是 CA 一致性和可用性!

    针对 CAP 定理 更官方的描述 可参考 分布式相关的实践论文; 也可参考 分布式基础_单位正交基_CAP定理.png

    BASE 理论:
        BASE理论 是 分布式实践 对 CAP 定理的一种验证, 或者一种妥协, 保证基本可用, 达到数据的最终一致性!

-----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 第2章 一致性协议 --------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
2PC:
    2PC : tow phase commit, 二阶段提交协议;

    协调者 和 事务参与者!

    第1阶段: 协调者向事务参与者发送询问, 并且写入 Undo日志或者 Redo日志;              　 　   第1阶段又称为询问阶段;
    第2阶段: 协调者根据第1阶段事务参与者的返回信息来确定接下来的操作, 是进行提交操作还是回滚操作!  第2阶段又称为提交阶段;

3PC:
    将2PC 的第1阶段拆分成 canCommit 和 preCommit 2个阶段, 就变成了 3PC!

    第1阶段: canCommit 询问阶段
    第2阶段: preCommit 预执行阶段, 写入 Undo 或者 Redo 日志!
    第3阶段: doCommit  执行阶段, 执行 commit 或者 rollback!

Paxos 算法 是解决分布式一致性协议的最终算法, 现在使用的 所有分布式一致性算法 都是 基于Paxos算法而来的, 分为两个阶段! 具体的细节可以参考书籍或去官方论文中去研究!


-----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 第3章 Paxos的工程实践 ---------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
Chubby:
    提供了一个完整的、独立的分布式锁服务、而非仅仅是一个一致性协议的客户端库!

    文件和目录, 类似于 Linux 或者 Unix 系统的文件, 这些文件都统称为 nodes!

-----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 第4章 Zookeeper_ZAB协议 ------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
集群角色: Leader, Follower 和 Observer 角色!

Session: 客户端连接

数据节点: 统称为 Znode, 分为持久化节点 和 临时节点!

-----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------- 第5章 Zookeeper使用 ----------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
集群搭建参考 Zookeeper集群安装.txt

使用
    创建节点
        命令格式: create [-s] [-e] path data acl
            -s: 顺序节点
            -e: 临时节点, 不添加 -e 表示 创建持久化节点!

        举例: 创建持久化有序节点!
            [zk: localhost:2181(CONNECTED) 0] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000000
            [zk: localhost:2181(CONNECTED) 1] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000001
            [zk: localhost:2181(CONNECTED) 2] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000002
            [zk: localhost:2181(CONNECTED) 3] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000003
            [zk: localhost:2181(CONNECTED) 4] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000004
            [zk: localhost:2181(CONNECTED) 5] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000005
            [zk: localhost:2181(CONNECTED) 6] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000006
            [zk: localhost:2181(CONNECTED) 7] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000007
            [zk: localhost:2181(CONNECTED) 8] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000008
            [zk: localhost:2181(CONNECTED) 9] create -s /zk-book zookeeper_inaction
            Created /zk-book0000000009

            .....

            WatchedEvent state:SyncConnected type:None path:null
            [zk: localhost:2181(CONNECTED) 0] create -s /zk-books zookeeper_inaction
            Created /zk-books0000000013
            [zk: localhost:2181(CONNECTED) 1] create -s /jvm-books hotspot_inaction
            Created /jvm-books0000000014
            [zk: localhost:2181(CONNECTED) 2] create -s /java-books java_inaction
            Created /java-books0000000015

        顺序节点当用正整数用完的时候:
            0000000001 --->  0000000002 ---> ... ---> 2147483647 ---> -2147483648 ---> -2147483647 ---> ... ---> 0000000001


        创建临时节点
            [zk: localhost:2181(CONNECTED) 1] create -e /deep_blue zhangsan
            Created /deep_blue

            [zk: localhost:2181(CONNECTED) 2] ls /
            [zk-books0000000013, deep_blue, zookeeper, java-books0000000015]

            关闭客户端等待几秒钟, 等待会话失效后 再次打开客户端查询:

            [zk: localhost:2181(CONNECTED) 3] ls /
            [zk-books0000000013, zookeeper, java-books0000000015]



    查看节点
        命令格式: ls path [watch]

        举例:
            [zk: localhost:2181(CONNECTED) 3] ls /
            [zk-books0000000013, jvm-books0000000014, zookeeper, java-books0000000015]

            [zk: localhost:2181(CONNECTED) 4] get /jvm-books0000000014
            hotspot_inaction
            cZxid = 0x20000000c
            ctime = Tue Feb 22 17:14:05 CST 2022
            mZxid = 0x20000000c
            mtime = Tue Feb 22 17:14:05 CST 2022
            pZxid = 0x20000000c
            cversion = 0
            dataVersion = 0
            aclVersion = 0
            ephemeralOwner = 0x0
            dataLength = 16
            numChildren = 0

    修改节点
        命令格式: set path data [version]

        举例:
            // 查询节点值
            [zk: localhost:2181(CONNECTED) 2] get /zk-books0000000013
            zookeeper_inaction
            cZxid = 0x20000000b
            ctime = Tue Feb 22 17:13:35 CST 2022
            mZxid = 0x20000000b
            mtime = Tue Feb 22 17:13:35 CST 2022
            pZxid = 0x20000000b
            cversion = 0
            dataVersion = 0
            aclVersion = 0
            ephemeralOwner = 0x0
            dataLength = 18
            numChildren = 0

            // 修改节点值
            [zk: localhost:2181(CONNECTED) 3] set /zk-books0000000013 zk
            cZxid = 0x20000000b
            ctime = Tue Feb 22 17:13:35 CST 2022
            mZxid = 0x50000000f
            mtime = Tue Feb 22 17:46:45 CST 2022
            pZxid = 0x20000000b
            cversion = 0
            dataVersion = 1
            aclVersion = 0
            ephemeralOwner = 0x0
            dataLength = 2
            numChildren = 0

            // 查询节点值
            [zk: localhost:2181(CONNECTED) 4] get /zk-books0000000013
            zk
            cZxid = 0x20000000b
            ctime = Tue Feb 22 17:13:35 CST 2022
            mZxid = 0x50000000f
            mtime = Tue Feb 22 17:46:45 CST 2022
            pZxid = 0x20000000b
            cversion = 0
            dataVersion = 1
            aclVersion = 0
            ephemeralOwner = 0x0
            dataLength = 2
            numChildren = 0

    删除节点:
        命令格式: delete path [version]

        举例:
            [zk: localhost:2181(CONNECTED) 7] ls /jvm-books0000000014
            [jvm-books-deep0000000001, jvm-books-deep0000000000]

            // TODO 不能删除内部有叶子节点的根节点
            [zk: localhost:2181(CONNECTED) 8] delete /jvm-books0000000014
            Node not empty: /jvm-books0000000014

            // 删除节点
            [zk: localhost:2181(CONNECTED) 10] delete /jvm-books0000000014/jvm-books-deep0000000000
            [zk: localhost:2181(CONNECTED) 11] delete /jvm-books0000000014/jvm-books-deep0000000001

            [zk: localhost:2181(CONNECTED) 13] ls /jvm-books0000000014
            []

            [zk: localhost:2181(CONNECTED) 14] delete /jvm-books0000000014

            [zk: localhost:2181(CONNECTED) 15] ls /
            [zk-books0000000013, zookeeper, java-books0000000015]


开关客户端:
    ZClient
    Curator

分布式锁:
    排他锁和共享锁, 共享锁不研究因为没有意义!

    排他锁: 通过创建临时节点来当做获取到某个共享资源的锁, 无论有多少个客户端, create 同一个节点时只能有一个创建成功!

        1、临时节点的 path 必须是固定的, 表示分布式服务都来抢这把 锁! 最好和业务挂钩! prefix 之类的

        2、客户端A 创建 临时节点 N, 表示获取到这个锁, 一旦当前客户端A 挂掉 则一旦会话失效 则自动删除! 否则客户端A 处理完事务 自动删除掉 临时节点N

















