# 配置服务器端口号
spring.application.name=java_springboot
server.port=8080

# 配置 MySQL
spring.datasource.mine.url=jdbc:mysql://127.0.0.1:3306/mysql_transaction?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&useSSL=false
spring.datasource.mine.username=root
spring.datasource.mine.password=Yang199001
spring.datasource.mine.driver-class-name=com.mysql.cj.jdbc.Driver

# 配置 jdbcTemplate 日志级别
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG

spring.mysql.version=8.0.X

# 配置 MongoDB, 这里和没有取消 MongoDB 的自动注入配置结合使用!
#   连接时出现错误: com.mongodb.MongoSocketOpenException: Exception opening socket
#   改动 mongodb.cnf 中的 bind_ip = 0.0.0.0, 改为远程访问 就OK了!

# 单节点使用
# spring.data.mongodb.uri=mongodb://yangyang:123456@192.168.188.82:27017/mydb

# ReplicaSet+Sharding 集群使用, 这里的连接是 mongos 的三个连接! TODO 推荐使用带用户名密码, 这里并没有采用!
spring.data.mongodb.uri=mongodb://192.168.188.84:30000,192.168.188.85:30000,192.168.188.86:30000/mydb?maxPoolSize=512


# 配置 MongoDB 日志, 作用: 打印每次操作 MongoDB 的日志
logging.level.org.springframework.data.mongodb=debug

# 配置 单机Redis
#spring.redis.host=192.168.188.65
#spring.redis.password=root
#spring.redis.port=6379
## 最大连接数, 0表示无限制
#spring.redis.jedis.pool.max-active=8


# 配置 主从模式 Redis集群 + 哨兵机制, 这种方式以后不要用了; 但这是搭建其他集群的基础, 也是CAP理论最有说服力的验证者, 可以搭一下集群 从Linux上测试以下!
# -- spring.redis.sentinel.password=root
# -- spring.redis.sentinel.master=mymaster
# -- spring.redis.sentinel.nodes=192.168.188.8:26379,192.168.188.8:26479,192.168.188.8:26579

# 配置 redis cluster 集群, TODO 以后只用这种方式, 因为这种方式 redis 官方也在维护!
spring.redis.password=root
spring.redis.cluster.nodes=192.168.188.83:6179,192.168.188.83:6279,192.168.188.83:6379,192.168.188.83:6479,192.168.188.83:6579,192.168.188.83:6679
spring.redis.cluster.max-redirects=3
spring.redis.lettuce.pool.max-idle=16
spring.redis.lettuce.pool.max-active=16
spring.redis.lettuce.pool.min-idle=16

# 配置 elasticsearch cluster 或者 使用公司封装好的中间件
spring.data.elasticsearch.cluster-name=my-elasticsearch-cluster
spring.data.elasticsearch.cluster-nodes=192.168.188.87:9300, 192.168.188.88:9300, 192.168.188.89:9300


# 配置 dubbo 消费者相关的配置
dubbo.registry.protocol=zookeeper
dubbo.registry.address=zookeeper://192.168.188.15:2181?backup=192.168.188.16:2181,192.168.188.17:2181,192.168.188.18:2181
dubbo.registry.group=/dubbo-group

# 配置 zookeeper url 连接 curator 实现分布式锁!
zk.url=192.168.188.15:2181,192.168.188.16:2181,192.168.188.17:2181,192.168.188.18:2181


rabbitmq.
